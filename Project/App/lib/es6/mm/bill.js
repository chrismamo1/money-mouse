// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE

import * as $$Date from "./date.js";
import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

function fixed(param_0) {
  return /* Fixed */Block.__(0, [param_0]);
}

function weekly(param_0) {
  return /* Weekly */Block.__(1, [param_0]);
}

function monthlyInterval(param_0) {
  return /* MonthlyInterval */Block.__(2, [param_0]);
}

function fillSchedule(startingOn, endingOn, sched) {
  switch (sched.tag | 0) {
    case 0 : 
        var days = sched[0];
        var startingOn$1 = $$Date.make(startingOn.getFullYear(), $$Date.int_of_month(startingOn.getMonth()), $$Date.int_of_day(startingOn.getDay()));
        var endingOn$1 = $$Date.make(endingOn.getFullYear(), $$Date.int_of_month(endingOn.getMonth()), $$Date.int_of_day(endingOn.getDay()));
        var diff = $$Date.Infix[/* - */0](endingOn$1, startingOn$1);
        var n = diff / (days * $$Date.dayOfMillis);
        return $$Array.init((n | 0) + 1 | 0, (function (i) {
                      var amt = days * $$Date.dayOfMillis * i;
                      return $$Date.Infix[/* + */2](startingOn$1, amt);
                    }));
    case 1 : 
        throw [
              Caml_builtin_exceptions.failure,
              "Please get rid of the weekly scheduling thingy."
            ];
    case 2 : 
        var day = sched[0];
        var beginningOfFirstMonth = $$Date.beginningOfMonth(startingOn);
        var aux = function (_acc, _it) {
          while(true) {
            var it = _it;
            var acc = _acc;
            var newDate = $$Date.make(it.getFullYear(), $$Date.int_of_month(it.getMonth()), day);
            if ($$Date.Infix[/* < */1](endingOn, newDate)) {
              return acc;
            } else {
              _it = $$Date.beginningOfNextMonth(it);
              _acc = /* :: */[
                newDate,
                acc
              ];
              continue ;
              
            }
          };
        };
        return $$Array.of_list(List.rev(aux(/* [] */0, beginningOfFirstMonth)));
    
  }
}

function getAmount(t) {
  return t[/* amount */5][1];
}

function getOwedTo(t) {
  return t[/* owedTo */3];
}

function getCategory(t) {
  return t[/* category */6];
}

function getDescription(t) {
  return t[/* description */2];
}

export {
  fixed ,
  weekly ,
  monthlyInterval ,
  fillSchedule ,
  getAmount ,
  getOwedTo ,
  getCategory ,
  getDescription ,
  
}
/* Date Not a pure module */
