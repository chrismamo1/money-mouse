// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE

import * as Bill from "./bill.js";
import * as $$Date from "./date.js";
import * as List from "bs-platform/lib/es6/list.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Payment from "./payment.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Spending_category from "./spending_category.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

var model = [/* record */[
    /* balance : :: */[
      /* record */[
        /* currency : Usd */0,
        /* amount */1000.0
      ],
      /* [] */0
    ],
    /* bills : [] */0,
    /* categories : :: */[
      Spending_category.make("#df7a7a", "Rent", /* Monthly */0, 250.0),
      /* :: */[
        Spending_category.make("#7adf7a", "Gas", /* Daily */2, 10.0),
        /* :: */[
          Spending_category.make("#74d9da", "Groceries", /* Weekly */1, 30.0),
          /* :: */[
            Spending_category.make("#7a7adf", "Eating Out", /* Monthly */0, 200.0),
            /* [] */0
          ]
        ]
      ]
    ],
    /* payments : [] */0
  ]];

var stateManagers = [/* [] */0];

function getModel() {
  return model[/* contents */0];
}

function setModel(x) {
  model[/* contents */0] = x;
  return model[/* contents */0];
}

function addStateManager(name, func) {
  var sms = stateManagers[/* contents */0];
  if (List.exists((function (param) {
            return +(param[0] === name);
          }), stateManagers[/* contents */0])) {
    return /* () */0;
  } else {
    stateManagers[/* contents */0] = /* :: */[
      /* tuple */[
        name,
        func
      ],
      sms
    ];
    return /* () */0;
  }
}

function removeStateManager(name) {
  stateManagers[/* contents */0] = List.filter((function (param) {
            return +(param[0] !== name);
          }))(stateManagers[/* contents */0]);
  return /* () */0;
}

function getCategoryColor(cat) {
  try {
    return List.find((function (x) {
                  return +(x.name === cat);
                }), model[/* contents */0][/* categories */2]).color;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return "#000000";
    } else {
      throw exn;
    }
  }
}

function addBill(owedTo, schedule, amount, startingOn, category) {
  var schedule$1;
  switch (schedule.tag | 0) {
    case 1 : 
        schedule$1 = /* Fixed */Block.__(0, [7]);
        break;
    case 0 : 
    case 2 : 
        schedule$1 = schedule;
        break;
    
  }
  var bill_005 = /* amount : `Fixed */[
    332360020,
    amount
  ];
  var bill = /* record */[
    /* firstDue */startingOn,
    /* schedule */schedule$1,
    /* description */"",
    /* owedTo */owedTo,
    /* method : Cash */747850451,
    bill_005,
    /* category */category
  ];
  console.log("New Bill: ", bill);
  var init = model[/* contents */0];
  return setModel(/* record */[
              /* balance */init[/* balance */0],
              /* bills : :: */[
                bill,
                model[/* contents */0][/* bills */1]
              ],
              /* categories */init[/* categories */2],
              /* payments */init[/* payments */3]
            ]);
}

function finalizePayment(x) {
  var init = model[/* contents */0];
  var model$prime_000 = /* balance */init[/* balance */0];
  var model$prime_001 = /* bills */init[/* bills */1];
  var model$prime_002 = /* categories */init[/* categories */2];
  var model$prime_003 = /* payments : :: */[
    x,
    model[/* contents */0][/* payments */3]
  ];
  var model$prime = /* record */[
    model$prime_000,
    model$prime_001,
    model$prime_002,
    model$prime_003
  ];
  setModel(model$prime);
  console.log("Model: ", model[/* contents */0]);
  return /* () */0;
}

addBill("Arthur", /* MonthlyInterval */Block.__(2, [25]), /* record */[
      /* currency : Usd */0,
      /* amount */250.0
    ], $$Date.make(2018, 2, 25), "Rent");

addBill("CenturyLink", /* MonthlyInterval */Block.__(2, [22]), /* record */[
      /* currency : Usd */0,
      /* amount */15.0
    ], $$Date.make(2018, 2, 22), "Rent");

addBill("Xinyu", /* MonthlyInterval */Block.__(2, [29]), /* record */[
      /* currency : Usd */0,
      /* amount */50.0
    ], $$Date.make(2018, 2, 29), "Eating Out");

addBill("John Brook's", /* Fixed */Block.__(0, [7]), /* record */[
      /* currency : Usd */0,
      /* amount */40.0
    ], $$Date.make(2018, 2, 22), "Groceries");

function getCategoriesArray() {
  return $$Array.of_list(model[/* contents */0][/* categories */2]);
}

function getCategoryByName(name) {
  return List.find((function (cat) {
                return +(cat.name === name);
              }), model[/* contents */0][/* categories */2]);
}

function addCategory(nam) {
  console.log("Adding category named ", nam);
  var cats = model[/* contents */0][/* categories */2];
  var color = List.find((function (c) {
          return 1 - List.exists((function (cat) {
                        return +(cat.color === c);
                      }), cats);
        }), Spending_category.colors);
  var init = model[/* contents */0];
  return setModel(/* record */[
              /* balance */init[/* balance */0],
              /* bills */init[/* bills */1],
              /* categories : :: */[
                Spending_category.make(color, nam, /* Monthly */0, 100.0),
                model[/* contents */0][/* categories */2]
              ],
              /* payments */init[/* payments */3]
            ]);
}

function removeCategory(nam) {
  try {
    var cats = List.filter((function (x) {
              return +(x.name !== nam);
            }))(model[/* contents */0][/* categories */2]);
    var init = model[/* contents */0];
    return setModel(/* record */[
                /* balance */init[/* balance */0],
                /* bills */init[/* bills */1],
                /* categories */cats,
                /* payments */init[/* payments */3]
              ]);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      console.log("removeCategory couldn't find category named ", nam);
      return model[/* contents */0];
    } else {
      throw exn;
    }
  }
}

function getPaymentsForPeriod(date, period) {
  var year = date.getFullYear();
  var month = date.getMonth();
  var dayOfMonth = date.getDate();
  var match;
  switch (period) {
    case 0 : 
        var month$1 = $$Date.int_of_month(month);
        match = /* tuple */[
          $$Date.make(year, month$1, 1),
          $$Date.make(year, (month$1 + 1 | 0) % 12, 0)
        ];
        break;
    case 1 : 
        var day = date.getDay();
        var dateMs = Curry._1($$Date.int_of_date, date);
        var ms = 1000.0 * 60 * 60 * 24 * $$Date.int_of_day(day);
        var firstDay = Curry._1($$Date.date_of_float, dateMs - ms);
        match = /* tuple */[
          firstDay,
          Curry._1($$Date.date_of_float, dateMs + 604800000)
        ];
        break;
    case 2 : 
        var next = Curry._1($$Date.date_of_float, Curry._1($$Date.int_of_date, date) + 86400000);
        var month$2 = $$Date.int_of_month(month);
        match = /* tuple */[
          $$Date.make(year, month$2, dayOfMonth),
          next
        ];
        break;
    
  }
  var stop = match[1];
  var start = match[0];
  var payments = model[/* contents */0][/* payments */3];
  return $$Array.of_list(List.filter((function (x) {
                      console.log("Testing payment ", x);
                      if ($$Date.Infix[/* < */1](x.date, stop)) {
                        return $$Date.Infix[/* < */1](start, x.date);
                      } else {
                        return /* false */0;
                      }
                    }))(payments));
}

function getBillsForMonth(year, month) {
  var allBills = model[/* contents */0][/* bills */1];
  var startingOn = $$Date.make(year, month, 0);
  console.log("length of bills: ", List.length(allBills));
  var tmp = List.map((function (bill) {
          var outerTest = $$Date.beginningOfNextMonth($$Date.make(year, month, 1));
          if ($$Date.Infix[/* < */1](bill[/* firstDue */0], outerTest)) {
            var match = bill[/* schedule */1];
            switch (match.tag | 0) {
              case 0 : 
                  var days = match[0];
                  var aux = function (_current) {
                    while(true) {
                      var current = _current;
                      if ($$Date.Infix[/* < */1](current, startingOn)) {
                        var millis = days * (1000 * 60 * 60 * 24);
                        _current = $$Date.Infix[/* + */2](current, millis);
                        continue ;
                        
                      } else if ($$Date.Infix[/* < */1]($$Date.beginningOfMonth(current), current) && $$Date.Infix[/* < */1](current, outerTest)) {
                        var millis$1 = days * (1000 * 60 * 60 * 24);
                        var next = $$Date.Infix[/* + */2](current, millis$1);
                        var existing;
                        try {
                          existing = /* Some */[List.find((function(current){
                                return function (pymnt) {
                                  var isCurrent = +(pymnt.date.getMonth() === current.getMonth() && pymnt.date.getFullYear() === current.getFullYear() && pymnt.date.getDate() === current.getDate());
                                  var match = pymnt.about;
                                  if (!match.tag && Caml_obj.caml_equal(match[0], bill)) {
                                    return isCurrent;
                                  } else {
                                    return /* false */0;
                                  }
                                }
                                }(current)), model[/* contents */0][/* payments */3])];
                        }
                        catch (exn){
                          existing = /* None */0;
                        }
                        var payment = existing ? existing[0] : Payment.make(bill[/* category */6], Bill.getAmount(bill), current, /* false */0, /* BillPayment */Block.__(0, [bill]));
                        return /* :: */[
                                payment,
                                aux(next)
                              ];
                      } else {
                        return /* [] */0;
                      }
                    };
                  };
                  return aux(bill[/* firstDue */0]);
              case 1 : 
                  var firstDayOfMonth = $$Date.make(year, month, 1);
                  firstDayOfMonth.getDay();
                  throw [
                        Caml_builtin_exceptions.failure,
                        "Finish writing model"
                      ];
              case 2 : 
                  var current = $$Date.make(year, month, match[0]);
                  var existing;
                  try {
                    existing = /* Some */[List.find((function (pymnt) {
                              var isCurrent = +(pymnt.date.getMonth() === current.getMonth() && pymnt.date.getFullYear() === current.getFullYear() && pymnt.date.getDate() === current.getDate());
                              var match = pymnt.about;
                              if (!match.tag && Caml_obj.caml_equal(match[0], bill)) {
                                return isCurrent;
                              } else {
                                return /* false */0;
                              }
                            }), model[/* contents */0][/* payments */3])];
                  }
                  catch (exn){
                    existing = /* None */0;
                  }
                  var payment = existing ? (console.log("Found a paid bill"), existing[0]) : Payment.make(bill[/* category */6], Bill.getAmount(bill), current, /* false */0, /* BillPayment */Block.__(0, [bill]));
                  return /* :: */[
                          payment,
                          /* [] */0
                        ];
              
            }
          } else {
            console.log("Failing outermost test: ", bill[/* firstDue */0].toDateString(), " ", outerTest);
            return /* [] */0;
          }
        }), allBills);
  return $$Array.of_list(List.flatten(tmp));
}

export {
  model ,
  stateManagers ,
  getModel ,
  setModel ,
  addStateManager ,
  removeStateManager ,
  getCategoryColor ,
  addBill ,
  finalizePayment ,
  getCategoriesArray ,
  getCategoryByName ,
  addCategory ,
  removeCategory ,
  getPaymentsForPeriod ,
  getBillsForMonth ,
  
}
/* model Not a pure module */
