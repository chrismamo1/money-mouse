// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

function int_of_month(month) {
  return month;
}

function int_of_day(day) {
  return day;
}

var dayOfMillis = 24.0 * 60.0 * 60.0 * 1000.0;

var date_of_int = (function(x) { return new Date(x) });

var date_of_float = (function(x) { return new Date(x) });

var int_of_date = (((x) => x - 0));

function beginningOfMonth(t) {
  var aux = (((y, m) => new Date(y, m, 1)));
  return Curry._2(aux, t.getFullYear(), t.getMonth());
}

function beginningOfNextMonth(t) {
  var aux = (((y, m) => new Date(y, m, 1)));
  return Curry._2(aux, t.getFullYear(), t.getMonth() + 1 | 0);
}

function make(year, month, day) {
  var aux = (((y, m, d) => new Date(y, m, d)));
  return Curry._3(aux, year, month, day);
}

function $neg(a, b) {
  var f$prime = (function(a, b) {
      if (a instanceof Date && b instanceof Date) {
        return a - b;
      } else {
        return NaN;
      }
    });
  var x = Curry._2(f$prime, a, b);
  if (x === Number.NaN) {
    throw [
          Caml_builtin_exceptions.failure,
          "Invalid types in date difference operation"
        ];
  } else {
    return x;
  }
}

function $less(a, b) {
  var f$prime = (function(a, b) {
      if (a instanceof Date && b instanceof Date) {
        return a < b;
      } else {
        throw(new Exception());
      }
    });
  return Curry._2(f$prime, a, b);
}

function $plus(a, b) {
  var f$prime = (function(a, b) {
      if (a instanceof Date) {
        return new Date((a - 0) + b);
      } else {
        return NaN;
      }
    });
  return Curry._2(f$prime, a, b);
}

var Infix = /* module */[
  /* - */$neg,
  /* < */$less,
  /* + */$plus
];

function now() {
  return (new Date());
}

function dayToString(day) {
  switch (day) {
    case 0 : 
        return "Sunday";
    case 1 : 
        return "Monday";
    case 2 : 
        return "Tuesday";
    case 3 : 
        return "Wednesday";
    case 4 : 
        return "Thursday";
    case 5 : 
        return "Friday";
    case 6 : 
        return "Saturday";
    
  }
}

function dateToString(t) {
  return t.getFullYear() + ("-" + (String(t.getMonth() + 1 | 0) + ("-" + t.getDate())));
}

function monthToString(month) {
  switch (month) {
    case 0 : 
        return "January";
    case 1 : 
        return "February";
    case 2 : 
        return "March";
    case 3 : 
        return "April";
    case 4 : 
        return "May";
    case 5 : 
        return "June";
    case 6 : 
        return "July";
    case 7 : 
        return "August";
    case 8 : 
        return "September";
    case 9 : 
        return "October";
    case 10 : 
        return "November";
    case 11 : 
        return "December";
    
  }
}

var january = /* January */0;

var february = /* February */1;

var march = /* March */2;

var april = /* April */3;

var may = /* May */4;

var june = /* June */5;

var july = /* July */6;

var august = /* August */7;

var september = /* September */8;

var october = /* October */9;

var november = /* November */10;

var december = /* December */11;

var sunday = /* Sunday */0;

var monday = /* Monday */1;

var tuesday = /* Tuesday */2;

var wednesday = /* Wednesday */3;

var thursday = /* Thursday */4;

var friday = /* Friday */5;

var saturday = /* Saturday */6;

export {
  january ,
  february ,
  march ,
  april ,
  may ,
  june ,
  july ,
  august ,
  september ,
  october ,
  november ,
  december ,
  sunday ,
  monday ,
  tuesday ,
  wednesday ,
  thursday ,
  friday ,
  saturday ,
  int_of_month ,
  int_of_day ,
  dayOfMillis ,
  date_of_int ,
  date_of_float ,
  int_of_date ,
  beginningOfMonth ,
  beginningOfNextMonth ,
  make ,
  Infix ,
  now ,
  dayToString ,
  dateToString ,
  monthToString ,
  
}
/* date_of_int Not a pure module */
